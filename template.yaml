AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CoinMarketWhat

Globals:
  Function:
    CodeUri: telegram_webhooks/
    Runtime: ruby2.7
    MemorySize: 128
    Timeout: 3
    Environment:
      Variables:
        CACHE_BUCKET: !Ref CacheBucket
        LOGS_BUCKET: !Ref LogsBucket

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CoinMarketWhatDB
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25
      AttributeDefinitions:
        -
          AttributeName: resource_id
          AttributeType: S
        -
          AttributeName: resource_type
          AttributeType: S
      KeySchema:
        -
          AttributeName: resource_id
          KeyType: HASH
        -
          AttributeName: resource_type
          KeyType: RANGE
  LogsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CoinMarketWhatLogsQueue
  LogsBucket:
    Type: AWS::S3::Bucket
  CacheBucket:
    Type: AWS::S3::Bucket
  TelegramWebhooks:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda.webhook
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt DynamoDBTable.Arn
            - Effect: Allow
              Action:
                - sqs:*
              Resource:
                - !GetAtt LogsQueue.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt CacheBucket.Arn }
            - Effect: Allow
              Action:
                - 'ssm:GetParameter*'
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Events:
        Webhooks:
          Type: HttpApi
          Properties:
            Path: /
            Method: post
  SaveLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda.logger
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt LogsBucket.Arn }
      Events:
        SQSLogsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt LogsQueue.Arn
  CacheFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda.cache
      MemorySize: 256
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt CacheBucket.Arn }
            - Effect: Allow
              Action:
                - 'ssm:GetParameter*'
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Events:
        UpdateCoinGeckoCacheEvent:
          Type: Schedule
          Properties:
            Input: '{"data_source": "CoinGecko"}'
            Schedule: rate(1 day)

Outputs:
  WebhooksApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  TelegramWebhooks:
    Description: "Lambda Function ARN"
    Value: !GetAtt TelegramWebhooks.Arn
  TelegramWebhooksIamRole:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt TelegramWebhooksRole.Arn
