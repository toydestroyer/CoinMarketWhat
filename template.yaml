AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CoinMarketWhat

Globals:
  Function:
    CodeUri: telegram_webhooks/
    Runtime: ruby2.7
    MemorySize: 128
    Timeout: 10
    Environment:
      Variables:
        EVENTS_TOPIC: !Ref EventsTopic
        CACHE_BUCKET: !Ref CacheBucket
        LOGS_BUCKET: !Ref LogsBucket
        PRE_CACHE_QUEUE: !Ref PreCacheQueue
        SENTRY_DSN: !GetAtt SentryDsnParameter.Value
        TELEGRAM_BOT_API_TOKEN: !GetAtt TelegramBotApiTokenParameter.Value
        TELEGRAM_ADMIN_CHAT_ID: !GetAtt TelegramAdminChatIdParameter.Value
        DONATION_ADDRESS: !GetAtt DonationAddressParameter.Value
        # GENERATE_IMAGES_API: !Ref ImagesApi

Resources:
  TelegramBotApiTokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/CoinMarketWhat/config/telegram_bot_api_token'
      Type: String
      Value: REPLACE-ME-IN-AWS-CONSOLE
  TelegramAdminChatIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/CoinMarketWhat/config/telegram_admin_chat_id'
      Type: String
      Value: REPLACE-ME-IN-AWS-CONSOLE
  SentryDsnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/CoinMarketWhat/config/sentry_dsn'
      Type: String
      Value: REPLACE-ME-IN-AWS-CONSOLE
  DonationAddressParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/CoinMarketWhat/config/donation_address'
      Type: String
      Value: '{"coin": "address"}'
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CoinMarketWhatDB
      BillingMode: PROVISIONED
      TimeToLiveSpecification:
        AttributeName: valid_to
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        -
          AttributeName: resource_id
          AttributeType: S
        -
          AttributeName: resource_type
          AttributeType: S
      KeySchema:
        -
          AttributeName: resource_id
          KeyType: HASH
        -
          AttributeName: resource_type
          KeyType: RANGE
  EventsTopic:
    Type: AWS::SNS::Topic
  PreCacheQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CoinMarketWhatPreCacheQueue
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  WebhooksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ResourcePolicy:
          # According to https://core.telegram.org/bots/webhooks
          # Telegram is sending webhooks from these ranges
          IpRangeWhitelist:
            - "149.154.160.0/20"
            - "91.108.4.0/22"
  ImagesApi:
    Type: AWS::Serverless::HttpApi
  TelegramWebhooks:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda::Webhook.call
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt DynamoDBTable.Arn
            - Effect: Allow
              Action:
                - sqs:*
              Resource:
                - !GetAtt PreCacheQueue.Arn
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref EventsTopic
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt CacheBucket.Arn }
      Events:
        Webhooks:
          Type: Api
          Properties:
            RestApiId: !Ref WebhooksApi
            Path: /
            Method: post
  SaveLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda::Logger.call
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt LogsBucket.Arn }
      Events:
        AllEvents:
          Type: SNS
          Properties:
            Topic: !Ref EventsTopic
  PreCacheFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda::PreCacher.call
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt DynamoDBTable.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt CacheBucket.Arn }
      Events:
        SQSLogsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PreCacheQueue.Arn
  CacheFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda::Cache.call
      MemorySize: 256
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub
                - ${BucketArn}/*
                - { BucketArn: !GetAtt CacheBucket.Arn }
      Events:
        UpdateCoinGeckoCacheEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
  AnswerCallbackQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.Lambda::AnswerCallbackQuery.call
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        CallbackQueryEvents:
          Type: SNS
          Properties:
            Topic: !Ref EventsTopic
            FilterPolicy:
              event_name:
                - callback_query
  GenerateImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generate_images/
      Handler: generate-images
      Runtime: go1.x
      MemorySize: 2048
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt DynamoDBTable.Arn
      Events:
        Generate:
          Type: HttpApi
          Properties:
            ApiId: !Ref ImagesApi
            Path: /{params}
            Method: GET
Outputs:
  WebhooksApi:
    Description: "API Gateway endpoint URL for Prod stage for Telegram Webhooks function"
    Value: !Sub "https://${WebhooksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
